#!/bin/bash
# This script fetches data for multiple PokÃ©mon in parallel.

POKEMON_LIST=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")
OUTPUT_DIR="pokemon_data_parallel"

mkdir -p "$OUTPUT_DIR"

# Set a trap to kill all background jobs when the script exits.
# This handles cases where the script is interrupted (e.g., Ctrl+C).
trap 'echo -e "\nScript interrupted. Killing background processes..."; kill $(jobs -p) 2>/dev/null' EXIT

fetch_pokemon() {
    local pokemon_name=$1
    local pokemon_lower=$(echo "$pokemon_name" | tr '[:upper:]' '[:lower:]')
    local output_file="$OUTPUT_DIR/${pokemon_lower}.json"
    local api_url="https://pokeapi.co/api/v2/pokemon/${pokemon_lower}"
    
    echo "Fetching data for $pokemon_lower..."
    if curl -fsS -o "$output_file" "$api_url"; then
        echo "Successfully saved data for $pokemon_lower."
    else
        echo "Failed to fetch data for $pokemon_lower." >&2
        rm -f "$output_file"
    fi
}

for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$pokemon" &
done

# The 'wait' command is the primary mechanism to wait for all jobs to complete normally.
wait

# Disable the trap on normal exit
trap - EXIT

echo ""
echo "All parallel fetches are complete."